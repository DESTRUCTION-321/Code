//This file is meant to give code for transmission.

sever:


#include <iostream>
#include <winsock2.h>
//#include <ws2tcpip.h>
//#include <tchar.h>
using namespace std;

int main(){
    //1. Initialize WSA variables
    WSADATA wsaData;
    int wsaerr;
    WORD wVersionRequested = MAKEWORD(2,2);
    wsaerr = WSAStartup(wVersionRequested, &wsaData);

    if(wsaerr != 0){
        cout << "The Winsock dll not found!" << endl;
        return 0;
    } else  {
        cout << "The Winsock dll found" << endl;
        cout << "The status: "<< wsaData.szSystemStatus << endl;
    }

    /*
    refer ServerCreation.md
    */
    SOCKET serverSocket;
    serverSocket = INVALID_SOCKET;
    serverSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    //check if creating socket is successfull or not
    if(serverSocket == INVALID_SOCKET){
        cout << "Error at socket():"<< WSAGetLastError() << endl;
        WSACleanup();
        return 0;
    } else {
        cout << "socket is OK!" << endl;
    }

    /*
    3. Bind the socket to ip address and port number
    //refer ServerCreation.md
    */
    sockaddr_in service{}; //initialising service as sockaddr_in structure
    service.sin_family = AF_INET;
    //InetPton(AF_INET, _T("127.0.0.1"), &service.sin_addr.s_addr);
    //InetPton function is encountering an issue, so replaced with the following line which uses inet_addr to convert IP address string to the binary form (only for ipv4) and storing it
    service.sin_addr.s_addr = inet_addr("127.0.0.1");
//    service.sin_addr.s_addr = inet_addr("192.168.43.42");
    service.sin_port = htons(55555);
    //using the bind function
    if(bind(serverSocket, (SOCKADDR*)&service, sizeof(service)) == SOCKET_ERROR){
        cout << "bind() failed: " << WSAGetLastError() << endl;
        closesocket(serverSocket);
        WSACleanup();
        return 0;
    } else {
        cout << "bind() is OK!" << endl;
    }

    //4. Listen to incomming connections
    if(listen(serverSocket, 1) == SOCKET_ERROR){
        cout << "listen(): Error listening on socket: " << WSAGetLastError() << endl;
    } else {
        cout << "listen() is OK!, I'm waiting for new connections..." << endl;
    }

    //5. accepting incomming connections
    SOCKET acceptSocket;
    acceptSocket = accept(serverSocket, nullptr, nullptr);
    if(acceptSocket == INVALID_SOCKET){
        cout << "accept failed: " << WSAGetLastError() << endl;
        WSACleanup();
        return -1;
    } else {
        cout << "accept() is OK!" << endl;
    }


    //6. (a) receiving data
    char receiveBuffer[200];
    int rbyteCount = recv(acceptSocket, receiveBuffer, 200, 0);
    if(rbyteCount < 0){
        cout << "Server recv error: " << WSAGetLastError() << endl;
        return 0;
    } else {
        cout << "Received data: " << receiveBuffer << endl;
    }

    //6. (b)  sending data
    char buffer[200];
    printf("Enter the message: ");
    cin.getline(buffer,200);
    int sbyteCount = send(acceptSocket, buffer, 200, 0);
    if(sbyteCount == SOCKET_ERROR){
        cout << "Server send error: " << WSAGetLastError() << endl;
        return -1;
    } else {
        cout << "Server: sent" << sbyteCount << endl;
    }

}

client:

#include <iostream>
#include <winsock2.h>
//#include <ws2tcpip.h>
using namespace std;

int main(){
    //WSAStartup
    WSADATA wsaData;
    int wserr;
    WORD wVersionRequested = MAKEWORD(2,2);
    wserr = WSAStartup(wVersionRequested, &wsaData);
    if(wserr != 0){
        cout << "The winsock dll not found" << endl;
        return 0;
    } else {
        cout << "The Winsock dll found" << endl;
        cout << "The status: "<< wsaData.szSystemStatus << endl;
    }

    //socket creation
    SOCKET clientSocket;
    clientSocket = INVALID_SOCKET;
    clientSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if(clientSocket == INVALID_SOCKET){
        cout << "Error at socket(): " << WSAGetLastError() << endl;
        WSACleanup();
        return 0;
    } else {
        cout << "socket is OK!" << endl;
    }

    //connection to server
    sockaddr_in clientService{};
    clientService.sin_family = AF_INET;
    clientService.sin_addr.s_addr = inet_addr("127.0.0.1");
    clientService.sin_port = htons(55555);
    if(connect(clientSocket, (SOCKADDR*)&clientService, sizeof(clientService)) == SOCKET_ERROR){
        cout << "Client: connect() - Failed to connect: " << WSAGetLastError() << endl;
        WSACleanup();
        return 0;
    } else {
        cout << "Client: Connect() is OK!" << endl;
        cout << "Client: Can start sending and receiving data..." << endl;
    }

    //sending data
    char buffer[200];
    printf("Enter the message: ");
    cin.getline(buffer,200);
    int sbyteCount = send(clientSocket, buffer, 200, 0);
    if(sbyteCount == SOCKET_ERROR){
        cout << "Server send error: " << WSAGetLastError() << endl;
        return -1;
    } else {
        cout << "Server: sent" << sbyteCount << endl;
    }

    //receiving messages
    // char receiveBuffer[200];
    // int byteCount = recv(acceptSocket, receiveBuffer, 200, 0);
    // if(byteCount < 0){
    //     cout << "Server recv error: " << WSAGetLastError() << endl;
    //     return 0;
    // } else {
    //     cout << "Received data: " << receiveBuffer << endl;
    // }

}

